
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;    // Importing Java Packages to be used in The application
import javax.crypto.spec.SecretKeySpec;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ztjam
 */
public class MainPage extends javax.swing.JFrame {

    
      byte[] input;
        byte[] keyBytes = "12345678".getBytes();
        byte[] ivBytes = "input123".getBytes();
        SecretKeySpec key = new SecretKeySpec(keyBytes, "DES");
        IvParameterSpec ivSpec = new IvParameterSpec (ivBytes);  // Declaring the variables of MainPage
        Cipher cipher;
        byte[] cipherText;
        int ctLength;
       
       
    /**
     * Creates new form MainPage
     * 
     * 
     * 
     */
    public MainPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLBL = new javax.swing.JLabel();
        DecryptTF = new javax.swing.JTextField();
        ResultTF = new javax.swing.JTextField();
        EncryptBTN = new javax.swing.JButton();
        DecryptBTN = new javax.swing.JButton();
        EncryptionLBL = new javax.swing.JLabel();
        ResultLBL = new javax.swing.JLabel();
        DecryptionLBL = new javax.swing.JLabel();
        EncryptTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TitleLBL.setText("Text Encryption");

        DecryptTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptTFActionPerformed(evt);
            }
        });

        EncryptBTN.setText("Encrypt");
        EncryptBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptBTNActionPerformed(evt);
            }
        });

        DecryptBTN.setText("Decrypt");
        DecryptBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptBTNActionPerformed(evt);
            }
        });

        EncryptionLBL.setText("Normal Text");

        ResultLBL.setText("Encrypted");

        DecryptionLBL.setText("Decryption");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EncryptBTN)
                        .addGap(90, 90, 90)
                        .addComponent(DecryptBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(EncryptTF, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(ResultTF, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(DecryptTF, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(TitleLBL)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(EncryptionLBL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ResultLBL)
                .addGap(205, 205, 205)
                .addComponent(DecryptionLBL)
                .addGap(102, 102, 102))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(TitleLBL)
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EncryptionLBL)
                    .addComponent(ResultLBL)
                    .addComponent(DecryptionLBL))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DecryptTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ResultTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EncryptTF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EncryptBTN)
                    .addComponent(DecryptBTN))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EncryptBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptBTNActionPerformed
       
        try{
        input = EncryptTF.getText().getBytes();  // Get the text of the text field EncryptTF
           SecretKeySpec key = new SecretKeySpec(keyBytes, "DES");  // Creating a Key that will be used later in the cipher
           IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
           cipher = Cipher.getInstance("DES/CTR/NoPadding"); // Declaring what kind of cipher is to be used
           cipher.init(Cipher.ENCRYPT_MODE,key,ivSpec); // Intitialising the encrypt mode using the established secret key
           cipherText = new byte[cipher.getOutputSize(input.length)]; //Declaring the byte for cipher text with how long the input is
           ctLength = cipher.update(input, 0,input.length, cipherText, 0);  // Declaring the ct Lenght
           
           ctLength += cipher.doFinal(cipherText, ctLength); // Calling the cihpher to encrypt CipherText using ctLenth
           ResultTF.setText(new String(cipherText)); // Set the result text field to the encrypted cipher text string
        } catch(Exception e){ // Catch any exceptions caused
            
        }
           
    }//GEN-LAST:event_EncryptBTNActionPerformed

    private void DecryptTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptTFActionPerformed
        
    }//GEN-LAST:event_DecryptTFActionPerformed

    private void DecryptBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptBTNActionPerformed
        try{
        cipher.init(Cipher.DECRYPT_MODE,key,ivSpec); // Intitialising the Decrypt mode using the established secret key
        
        byte[] plainText = new byte [cipher.getOutputSize(ctLength)]; //  Creating new byte called Plain Text using the length variable
        
        int ptLength = cipher.update (cipherText, 0, ctLength, plainText, 0); // Updating the cipher
        
        ptLength += cipher.doFinal(plainText,ptLength);// 
        DecryptTF.setText(new String(plainText)); //   // Set the Decrypt text field to the plain text cipher text string
        
        } catch(Exception e){ // Catch any exceptions caused
            
        }
         
      
       
    }//GEN-LAST:event_DecryptBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true); // seting the page to be visible if it was run seperatly
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DecryptBTN;
    private javax.swing.JTextField DecryptTF;
    private javax.swing.JLabel DecryptionLBL;
    private javax.swing.JButton EncryptBTN;
    private javax.swing.JTextField EncryptTF;
    private javax.swing.JLabel EncryptionLBL;
    private javax.swing.JLabel ResultLBL;
    private javax.swing.JTextField ResultTF;
    private javax.swing.JLabel TitleLBL;
    // End of variables declaration//GEN-END:variables
}
